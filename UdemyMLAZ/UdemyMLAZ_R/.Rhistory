dataset = read.csv("D:/OneDrive/Courses - Labs/ML_AZ/Machine Learning A-Z/Part 1 - Data Preprocessing/Data.csv")
dataset$Age = ifelse(test = is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Age)
dataset$Salary = ifelse(test = is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes'), labels = c(0, 1))
dataset$Country = factor(dataset$Country, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3))
library(caTools) set.seed(seed = 123) split = sample.split(dataset$Purchased, SplitRatio = 0.8) training_set = subset(dataset, split == TRUE) test_set = subset(dataset, split == FALSE) #feature scaling training_set[, 2:3] = scale(training_set[, 2:3]) test_set[, 2:3] = scale(test_set[, 2:3])
dataset = read.csv("..\\Simple_Linear_Regression\\Salary_Data.csv")
dataset
# split the data library(caTools) set.seed(seed = 123) split = sample.split(dataset$Salary, SplitRatio = 2/3) training_set = subset(dataset, split == TRUE) test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience,training_set)
summary(regressor)
y_pred = predict(regressor,newdata = test_set)
y_pred
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
ggplot() +     geom_point(         aes(x = training_set$YearsExperience, y = training_set$Salary),         color = 'red') +     geom_line(         aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),         color = 'green')
ggplot() +     geom_point(         aes(x = training_set$YearsExperience, y = training_set$Salary),         color = 'red') +     geom_line(         aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),         color = 'green') +     ggtitle('Salary vs Experience of Training Set') +     xlab('Years of Experience') +     ylab('Salary')
ggplot() +     geom_point(         aes(x = test_set$YearsExperience, y = test_set$Salary),         color = 'red') + #you don't change the prediction on the training set     geom_line(         aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),         color = 'green') +     ggtitle('Salary vs Experience of Training Set') +     xlab('Years of Experience') +     ylab('Salary')
dataset = read.csv("..\\Multiple_Linear_Regression\\5-_Startups.csv")
dataset = read.csv("..\\Multiple_Linear_Regression\\50_Startups.csv")
test_set = subset(dataset, split == FALSE)
dataset = read.csv("..\\Multiple_Linear_Regression\\50_Startups.csv")
dataset = read.csv("..\\Multiple_Linear_Regression\\50_Startups.csv")
dataset = read.csv("..\\Polynomial_Regression\\Position_Salaries.csv") dataset = dataset[2:3] # Splitting the dataset into the Training set and Test set # # install.packages('caTools') # library(caTools) # set.seed(123) # split = sample.split(dataset$Salary, SplitRatio = 2/3) # training_set = subset(dataset, split == TRUE) # test_set = subset(dataset, split == FALSE) # Feature Scaling # training_set = scale(training_set) # test_set = scale(test_set) # Fitting the SVR Model to the dataset # Create your regressor here #install.packages('e1071') library(e1071)
regressor = svm(formula = Salary ~ ., data = dataset)
regressor = svm(formula = Salary ~ ., data = dataset, type='eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
library(ggplot2) ggplot() +   geom_point(aes(x = dataset$Level, y = dataset$Salary),              colour = 'red') +   geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),             colour = 'blue') +   ggtitle('Truth or Bluff (Regression Model)') +   xlab('Level') +   ylab('Salary')
install
install.packages('rpart')
dataset = read.csv("..\\Polynomial_Regression\\Position_Salaries.csv") dataset = dataset[2:3] # Splitting the dataset into the Training set and Test set # # install.packages('caTools') # library(caTools) # set.seed(123) # split = sample.split(dataset$Salary, SplitRatio = 2/3) # training_set = subset(dataset, split == TRUE) # test_set = subset(dataset, split == FALSE) # Feature Scaling # training_set = scale(training_set) # test_set = scale(test_set) # Fitting the SVR Model to the dataset # Create your regressor here #install.packages('e1071') library(rpart) regressor = rpart(formula = Salary ~ ., data = dataset, ) # Predicting a new result y_pred = predict(regressor, data.frame(Level = 6.5)) # Visualising the SVR Model results # install.packages('ggplot2') library(ggplot2) ggplot() +   geom_point(aes(x = dataset$Level, y = dataset$Salary),              colour = 'red') +   geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),             colour = 'blue') +   ggtitle('Truth or Bluff (Regression Model)') +   xlab('Level') +   ylab('Salary')
regressor = rpart(formula = Salary ~ ., data = dataset, control = rpart.control(minsplit = 1) ) # Predicting a new result y_pred = predict(regressor, data.frame(Level = 6.5)) # Visualising the SVR Model results # install.packages('ggplot2') library(ggplot2) ggplot() +   geom_point(aes(x = dataset$Level, y = dataset$Salary),              colour = 'red') +   geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),             colour = 'blue') +   ggtitle('Truth or Bluff (Regression Model)') +   xlab('Level') +   ylab('Salary')
library(ggplot2) x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01) ggplot() +   geom_point(aes(x = dataset$Level, y = dataset$Salary),              colour = 'red') +   geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),             colour = 'blue') +   ggtitle('Truth or Bluff (Regression Model)') +   xlab('Level') +   ylab('Salary')
